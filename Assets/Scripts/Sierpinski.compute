// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

float width;
float height;

float xMin;
float xMax;
float yMin;
float yMax;

int maxIterations;

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Calculate point in complex plane corresponding to current pixel
    float a = xMin + (xMax - xMin) * id.x / width;
    float b = yMin + (yMax - yMin) * id.y / height;
    int x = id.x;
    int y = id.y;
    int size = width;
    for (int i = 0; i < maxIterations; i++)
    {
        if (x % size == size / 3 && y % size == size / 3)
        {
            Result[float2(x, y)] = float4(0.0f, 0.0f, 0.0f, 1.0f);
            return;
        }
        size /= 3;
    }
    Result[float2(x, y)] = float4(1.0f, 1.0f, 1.0f, 1.0f);
}
